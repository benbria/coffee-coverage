// Generated by CoffeeScript 1.4.0
(function() {
  var fs, path, statFile;

  fs = require('fs');

  path = require('path');

  path.sep = path.sep || "/";

  exports.startsWith = function(str, prefix) {
    return str.slice(0, +(prefix.length - 1) + 1 || 9e9) === prefix;
  };

  exports.endsWith = function(str, suffix) {
    return str.slice(-suffix.length) === suffix;
  };

  exports.defaults = function(dest, src) {
    var key, val;
    if (!dest) {
      dest = {};
    }
    for (key in src) {
      val = src[key];
      if (!(key in dest)) {
        dest[key] = val;
      }
    }
    return dest;
  };

  exports.stripLeadingDot = function(pathName) {
    return pathName.replace(/^\.\//, "");
  };

  exports.statFile = statFile = function(file) {
    var answer;
    try {
      answer = fs.statSync(file);
    } catch (err) {
      if ('code' in err && err.code === 'ENOENT') {
        answer = null;
      } else {
        throw err;
      }
    }
    return answer;
  };

  exports.mkdirs = function(dirPath, mode) {
    var currentPath, pathElement, pathElements, stat, _i, _len, _results;
    if (!statFile(dirPath)) {
      pathElements = dirPath.split(path.sep);
      currentPath = "";
      _results = [];
      for (_i = 0, _len = pathElements.length; _i < _len; _i++) {
        pathElement = pathElements[_i];
        if (!pathElement) {
          continue;
        }
        currentPath += pathElement + path.sep;
        stat = statFile(currentPath);
        if (stat && !stat.isDirectory()) {
          throw new CoverageError("Can't create directory " + currentPath + ": file already exists.");
        }
        if (!stat) {
          _results.push(fs.mkdir(currentPath, mode));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  };

  exports.abbreviatedPath = function(pathName) {
    var answer, filename, needTrailingSlash, pathElement, splitPath, _i, _len;
    needTrailingSlash = false;
    splitPath = pathName.split(path.sep);
    if (splitPath.slice(-1)[0] === '') {
      needTrailingSlash = true;
      splitPath.pop();
    }
    filename = splitPath.pop();
    answer = "";
    for (_i = 0, _len = splitPath.length; _i < _len; _i++) {
      pathElement = splitPath[_i];
      if (pathElement.length === 0) {
        answer += "";
      } else if (pathElement === "..") {
        answer += pathElement;
      } else if (exports.startsWith(pathElement, ".")) {
        answer += pathElement.slice(0, 2);
      } else {
        answer += pathElement[0];
      }
      answer += path.sep;
    }
    answer += filename;
    if (needTrailingSlash) {
      answer += path.sep;
    }
    return answer;
  };

}).call(this);
